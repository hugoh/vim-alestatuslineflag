*alestatuslineflag.txt*	AleStatuslineFlag: SyntasticStatuslineFlag for ALE
Hugo Haas <hugoh@hugoh.net>                                *alestatuslineflag*

==============================================================================
CONTENTS                                          *alestatuslineflag-contents*
  1. Introduction....................................|alestatuslineflag-intro|
  2. Configuration..................................|alestatuslineflag-config|

==============================================================================
INTRODUCTION                                         *alestatuslineflag-intro*

This plugin is a port of `SyntasticStatuslineFlag()` for |ALE|. Some aspects
are currently not supported.

To use the statusline flag, this must appear in your |'statusline'| setting
>
    %{AleStatuslineFlag()}
<
Something like this could be more useful:
>
    set statusline+=%#warningmsg#
    set statusline+=%{AleStatuslineFlag()}
    set statusline+=%*
<
When syntax errors are detected a flag will be shown. The content of the flag
is derived from the |g:alestatusline_format| option.

As an example, the |flagship| Vim plugin
(https://github.com/tpope/vim-flagship) has its own mechanism of showing flags
on the |'statusline'|. To allow |flagship| to manage this statusline flag add
the following |autocommand| to your vimrc:
>
    autocmd User Flags call Hoist("window", "AleStatuslineFlag")
<

==============================================================================
CONFIGURATION                                       *alestatuslineflag-config*

                                                      *g:alestatusline_format*
Default: '[Syntax: line:%F (%t)]'

Use this option to control what the syntastic statusline text contains.
Several magic flags are available to insert information:
%e  - number of errors
%w  - number of warnings
%se - number of style errors
%sw - number of style warnings
%t  - total number of warnings and errors
%ne - [UNSUPPORTED] filename of file containing first error
%nw - [UNSUPPORTED] filename of file containing first warning
%N  - [UNSUPPORTED] filename of file containing first warning or error
%pe - [UNSUPPORTED] filename with path of file containing first error
%pw - [UNSUPPORTED] filename with path of file containing first warning
%P  - [UNSUPPORTED] filename with path of file containing first warning or
  error
%fe - line number of first error
%fw - line number of first warning
%F  - line number of first warning or error

Note that |AleStatuslineFlag| does not support width and alignment controls as
|SyntasticStatuslineFlag| does.

All fields except {flag} are optional. A single percent sign can be given as
"%%".

Several additional flags are available to hide text under certain conditions:
%E{...} - hide the text in the brackets unless there are errors
%W{...} - hide the text in the brackets unless there are warnings
%B{...} - hide the text in the brackets unless there are both warnings AND
  errors

These flags can't be nested.

Example:
>
    let g:alestatusline_format = "[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]"
<
` If this format is used and the current buffer has 5 errors and 1 warning
starting on lines 20 and 10 respectively then this would appear on the
statusline:
>
    [Err: 20 #5, Warn: 10 #1]
<

If the buffer had 2 warnings, starting on line 5 then this would appear:
>
    [Warn: 5 #2]
<


vim:tw=78:ts=8:ft=help:norl:
